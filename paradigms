# Парадигмы

1. Императивный подход - последовательный переход из одной части программы в другую. Алгоритмический подход. Переменные, циклы и условные переходы.
2. Функциональный подход - многие операции могут исполняться параллельно, нет переменных, не может быть циклов. Должны быть только функции и их аргументы. Вместо циклов рекурсия.
3. Неструктурный подход - assembler, basic, bash. Мы можем попасть в любую точку программы, у нас нет контекста. Все переменные - глобальные. Эти программы имеют максимальное быстродействие.
4. Структурный подход - есть контекст, человекопонятный.
5. Процедурный подход - разбитие на компоненты, которые могут друг друга вызывать.
6. Объектно-ориентированный подход - разделение программы на компоненты со своим состоянием и методы. Атрибуты и методы объединяются в классы.
7. Прототианый подход - то же, что и ООП, только вместо классов прототипы.
8. Декларативный - пример: Lisp. 
9. Логический подход.

# Техники

1. Асинхронная
2. Параллельная
3. ООП. Поведение смешивается с данными.
4. Визуальная.
5. Реактивная. Разные значения связаны друг с другом и передают другим значения.
6. Событийная. 
